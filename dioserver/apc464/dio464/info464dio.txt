












                                    Acromag, Inc.
                                  30765 S.Wixom Road
                                    P.O. Box 437
                              Wixom, Michigan 48393-7037

                                Phone: (248)295-0310
                                 FAX: (248)624-9234

                                Linux Software Library
                      Information File for the Pmc464 Digital I/O
                                        V2.0
                                      01/28/03




               The  information  in this manual is subject to  change
               without notice.   Acromag,  Inc.  makes no warranty of
               any kind with regard to this material and accompanying
               software,  including, but not limited to , the implied
               warranties  of  merchantability  and  fitness  for   a
               particular   purpose.    Acromag,   Inc.   assumes  no
               responsibility for any errors that may appear in  this
               manual and accompanying software.

               See GPL.txt and LGPL.txt.

































       1.  Overview

	This  "information"  file  contains a description of  the library
	programs  used for  the following Acromag Industrial  I/O  Board:

	     Pmc464 Counter/Timer/Digital I/O Board - Digital I/O Section


	2. Introduction

	The software for the Pmc464 Digital I/O section is implemented as
	a library of "C" functions.  This will  make  it     possible  to
	utilize the board by simply linking  the user's  code   with  the
	provided   library   and   making   function   calls   for   each
	"command"  to be accomplished.  Most of the function  calls  will
	require  a few parameters or the address of a parameter block  to
	be  passed.   The  parameters will  include  the  board  address,
	configuration  information,  data storage addresses,  and  status
	information. These functions accomplish the following tasks:


	     - Configuration
	     - Read Status
	     - Read Input
	     - Write Output
	     - Change of State and Level Interrupts


	Also  included  is  a demonstration program which shows  how  the
	library routines are used.   It  is  a  helpful  program  to  use
	when first installing the board, checking  it  out, and  learning
	how it works.



	3. List of Files

	The library  software  for  each  Acromag  I/O  board  is  in   a
	correspondingly named  subdirectory  on the  supplied media.  The
	files  which  make up the library for the Pmc464 board are stored
	in the subdirectory named "Pmc464\dio464".

	There  are two types of program files provided.   Library program
	files are the files which make up the "library".  Support program
	files contain example  programs which show how to use the library
	programs.










				   1







	3.1 Library Program Files

	The following files are included on the supplied media and make
	up the actual digital I/O section "library" software.


	     ../Pmc464.h  - include file
	     cnfgdio.c - configure
	     rstsdio.c - read status
	     rpntdio.c - read an input point
	     rprtdio.c - read an input port
	     wpntdio.c - write an output point
	     wprtdio.c - write an output port



	3.2 Support Program Files

	The  following files are included on the supplied media.   The
	test program demonstrates how  the library  programs may be used.

	mainmenu.c - test program to demonstrate library  programs.
	../../pmccommon/pmcmulticommon.h - include file for Pmc support.
	../../pmccommon/pmcmulticommon.c - source file for Pmc support.


	4. Software Installation

	It  is strongly advised that the user make a backup copy  of  the
	distribution media and that the original  distribution  media  be
	stored in a safe place.

	The  software is installed by simply copying the library files to
	the  user's  work directory and compiling and  linking  with  the
	user's application program.


	5. Hardware Installation

	For proper installation of each Acromag I/O board the user should
	refer  to  the appropriate user's manual.


	6. Usage of the Library and Support Programs

	The  software is installed  by copying the supplied files to your
	work  directory and compiling  and linking  with your application
	program.

	It  is recommended that the user read the  User's Manual for  the
	board  and  thoroughly  familiarize themselves with the hardware.

	For a new user to become familiar with the Acromag Library it may
	be  most  "straight forward"  to proceed in the following manner:
                                 



				      2
























             (a) Build and execute the Acromag Library Demonstration.


                  i)  Copy the Acromag Library routines from the "Pmc464"
                  directory of the source media to a new directory  under
                  /home/pmc/pmc464.


                  ii)  Copy   the  Pmc common  support routines  from the
                  "pmccommon" directory of the  source  media  to  a  new
                  directory  under   /home/pmc/pmccommon. 


                  iii) From  a  tty  shell,   make  /home/pmc/pmc464  the
                  current directory then use the  makefile  to  build the
                  project.


                  iv)  Launch  the  debugger,  "gdb a.out"  use the 'run' 
                  command to start the program. 


                  v)   The  Acromag  Demonstration  program  menu  should
                  appear  on  the  target processor's  console  terminal.




  












				      3






	The following menu is displayed:

	     Pmc464 Digital I/O Demonstration  Version A

	     1. Exit this Program
	     2. Set Up Configuration Block Parameters
	     3. Configure Board Command
	     4. Read Status Command
	     5. Attach Exception Handler
	     6. Detach Exception Handler
	     7. Read Input Point
	     8. Read Input Port
	     9. Write Output Point
	    10. Write Output Port

	    Select:


	To perform digital I/O, follow this sequence of menu selections:

	     Select 2: To set up configuration block parameters.
	     Select 3: To configure the board.
	     Select 4: To read the board's status.
	     Select 7 or 8: To read input.
	     Select 9 or 10: To write output

	To use  the  example  interrupt  routine  provided,  follow  this
	sequence of main menu selections:


	     Select 5: To attach the interrupt exception handler.
	     Select 2: To set up the Configuration Block through  the
		       Configuration  Block  Parameter Menu.   This  Menu
		       will  allow  the  user to set  the  board  up  for
		       interrupts.  Following are typical values for  the
		       Configuration  Block  parameters  when  using  the
		       example interrupt handler routines:


	     Configuration Block Parameters

             1. Return to Previous Menu
             2. Board Pointer:     C1000000
             3. Parameter Mask:    3F
             4. Data Direction:    0 = 0030  1 = 0000
             5. Int. Status:       0 = FFFF  1 = 0000  2 = 0000  3 = 0000
             6. Int. Enable:       0 = FFFF  1 = 0000  2 = 0000  3 = 0000
             7. Int. Polarity:     0 = 0000  1 = 0000  2 = 0000  3 = 0000
             8. Int. Type:         0 = FFFF  1 = 0000  2 = 0000  3 = 0000
             9. Debounce Duration:
                 0 = 00000000    1 = 00000000    2 = 00000000    3 = 00000000
                 4 = 00000000    5 = 00000000    6 = 00000000    7 = 00000000







				   4






	     Select 3: To  configure  the board using the information  in
		       the Configuration Block.
	     Select 4: To  confirm  the  configuration  by  reading   the
		       board's status information.   The interrupt status
		       register indicates the  latest  interrupt  status.
	     Select 7 or 8:  To read port data.
	     Select 9 or 10: To write port data.





	6.1 Explanation of Main Demonstration Menu

	Following is an explanation of each menu selection:

	     1. Exit this Program

	     This  selection detaches the interrupt handlers used by  the
	     demonstration  program (if  any  are  attached)  and  causes
	     execution to be returned to the shell.

	     2. Set Up Configuration Block Parameters

	     This  selection will cause the Configuration Block Parameter
	     Menu to be displayed.  Through that menu it will be possible
	     to  enter values into the various structure members  of  the
	     Configuration Block structure.   See section 6.2 for details
	     on the Configuration Block Parameter Menu which follows.

	     3. Configure Board Command

	     This  menu selection will call the  cnfgdio()  function  and
	     pass  a  pointer  which points to  the  Configuration  Block
	     structure.    Information  in  the  Configuration  Block  is
	     written to the board.

	     4. Read Status

	     This  menu  selection will call the rstsdio()  function  and
	     pass  a pointer which points to the Status Block  structure.
	     The  current status information is read from the  board  and
	     written into this structure by the rstsdio()  function.  The
	     status information is then displayed by the example program.















				   5








	     5. Attach Exception Handler

	     This  menu selection allows the user to attach  an interrupt
	     handler for the demonstration program.

	     The  interrupt   exception   handler   allows  servicing  of
	     interrupts in different ways depending upon the user's need.
	     Following is a synopsis of the exception handler. Please see
	     the descriptions in this document of the  interrupt  handler
	     routines and the extensive comments in the  source  code  of
	     the routines.

	     Change   of  State  Method:   This  type  of  interrupt
	     servicing  is  done  when  the  user  wants  processing
	     done each time the state of  the interrupt input signal
	     changes, either  from low  to  high  or  high  to  low.

	     Disable  Interrupt  Method  (Level):     This  type  of
	     interrupt   exception   servicing   is  done  when  the
	     interrupt input stimulus  cannot  be removed quickly by
	     the  interrupt  service   routines.     Interrupts  are
	     disabled for the interrupting input point.  The user is
	     responsible for  re-enabling  interrupts  for the input
	     point  after  the interrupt  input  stimulus  has  been
	     removed.   An alternative would be to use the Change of
	     State Method.


	     6. Detach Exception Handler

	     This  menu selection is not implemented at this  time and is
	     not generally needed.

	     7. Read Input Point

	     This  command  is used to read a  single  input  point.  The
	     user enters the  port number ( 0 to 3) and the point  number
             (0 to 15).   The  rpntdio() function  is  called,  then  the
             result is displayed.

	     8. Read Input Port

	     This command is used to read a port. The user enters the port
             number ( 0 to 3).  The rprtdio() function is called, then the
             result is displayed.












				   6





	     9. Write Output Point

	     This command is used to write a  single  output  point.  The
             user enters the port number ( 0 to 3 ) and the point  number
             ( 0 to 15 ), and the  value  to  write  (0 or 1),  then  the
             wpntdio() function is called.

	     10. Write Output Port

	     This command is  used to  write 16 points.   The user enters
             the port number ( 0 to 3 ) and the value to write (0 to FFFF
             hex), then the  wprtdio() function is called.


	6.2  Explanation of the Configration Block Parameter Menu

	This menu  is  displayed  when  the  user  selects  the  "Set  Up
	Configuration  Block"  menu  item  from  the  Main  Demonstration
	Menu.   Through the Configuration Block Parameter Menu it will be
	possible  for  the  user to enter values into  the  Configuration
	Block  structure.   The Configuration Block structure is used  by
	the cnfgdio() function.   Following is the "Set Up  Configuration
	Block Parameters" menu.  All numbers are displayed and entered in
	hexadecimal.

	     Configuration Block Parameters

             1. Return to Previous Menu
             2. Board Pointer:    C1000000
             3. Parameter Mask:   3F
             4. Data Direction:   0 = 0030  1 = 0000
             5. Int. Status:      0 = FFFF  1 = 0000  2 = 0000  3 = 0000
             6. Int. Enable:      0 = FFFF  1 = 0000  2 = 0000  3 = 0000
             7. Int. Polarity:    0 = 0000  1 = 0000  2 = 0000  3 = 0000
             8. Int. Type:        0 = FFFF  1 = 0000  2 = 0000  3 = 0000
             9. Debounce Duration:
                0 = 00000000    1 = 00000000    2 = 00000000    3 = 00000000
                4 = 00000000    5 = 00000000    6 = 00000000    7 = 00000000

	     Select:


	     (Note  that  the values in the menu will differ depending  on
	     your system.)

	     Following is an explanation of each menu selection:

	     1. Return to Previous Menu

	     This selection returns  the user  to the Main  Demonstration
	     Menu.

	     2. Board Pointer

	     The Pmc module address is displayed.





				   7







	     3. Parameter Mask

	     This  selection  allows the user to enter a  value  for  the
	     Parameter   Mask.   The  Parameter  Mask  is  used  by   the
	     cnfgdio()  function to determine which parameters to  update
	     in  various  registers of the board.   The  individual  bits
	     correspond to various parameters in the Configuration Block.
	     A  "1"  in  the bit position means  to  use  the  respective
	     parameter  field to update a register on the board.   A  "0"
	     means not to use the parameter field.


		  bit 0  - Interrupt Status Registers parameters.
		  bit 1  - Interrupt Enable Registers Parameters.
		  bit 2  - Interrupt Polarity Registers Parameters.
		  bit 3  - Interrupt Type Registers Parameters.
  		  bit 4  - Data Direction Registers Parameters.
  		  bit 5  - Debounce Duration Registers Parameters.
  		  bit bits 6, and 7 - Reserved.


	     4. Data Direction

	     This selection allows the user to enter values  for the Data
	     Direction Registers.   Please see  hardware users manual for
             more information about the data direction registers.



	     5. Interrupt Status

	     This  selection  allows the user  to enter a  value for  the
	     Interrupt   Status   Register.   This  register is typically
	     written  to by an interrupt  handler  routine  to  clear  an
	     interrupt  after  the  interrupt  input  stimulus  has  been
	     removed.   The user may access the  registers here  in order
	     to see its function.  A "1" in any bit position  will  clear
	     the corresponding  interrupt input bit.  A  "0"  in  any bit
	     position will have no effect.



	     6. Interrupt Enable

	     This  selection  allows the user to enter a  value  for  the
	     Interrupt   Enable  Register.   Each  bit   corresponds   to
	     an interrupt input point in the enable register.    A "1" in
	     any bit position will allow interrupts to  be  generated  by
	     the corresponding point.    A  "0"  disables  interrupts for
	     the  corresponding  interrupt  input  point.








				   8







	     7. Interrupt Polarity

	     This  selection  allows the user to enter a  value  for  the
	     Interrupt  Polarity  Register.   A value of  "0"  in  a  bit
	     position  allows  an  interrupt  to  be   generated  when  a
	     corresponding input point is below the threshold.
	     A value of  "1" in a bit position allows  an interrupt to be
	     generated when a  corresponding  input point  is  above  the
	     threshold.

	     8. Interrupt Type

	     This  selection  allows  the user to enter a value  for  the
	     Interrupt Type Register.  A "0" in a bit position  means  an
	     interrupt  will be  generated when  the corresponding  input
	     channel level specified by the  interrupt polarity  register
	     occurs.   A "1" in a bit position means an interrupt will be
	     generated when the corresponding input channel changes state.

	     9. Debounce Duration

	     This selection allows the  user to enter  debounce  duration
             values.    Please  see the hardware users  manual  for  more
             information about the debounce duration registers.




	7. Description of Library Programs.

	Following  are descriptions of the programs and files which  make
	up the library.

	Pmc464.h - This module contains  the  definitions  and  structures
	used by the library.

	cnfgdio.c - This module  is used to perform the "Configure Board"
	function  for  the Pmc464 digital I/O section.   A pointer to the
	Configuration Block is passed to this routine.  The routine  will
	use a pointer within the  Configuration  Block  to  reference the
	registers on the board.  Based on flag bits in the Parameter Mask
	word in the Configuration Block,  the  board  will be  configured
	and various registers will be  updated with new information which
	will be transfered from the Configuration Block.

	  calling sequence:

	     cnfgdio(ptr);

	     where:
		  ptr  - (structure  pointer)  This is a pointer  to  the
		  Configuration Block structure.






				   9







	rstsdio.c  - This  module  is used to  perform  the "Read Status"
	function  for  the  Pmc464  board.	A  pointer to the  Status
	Block  is  passed to this routine.  The routine  uses  a  pointer
	within  the Status Block to reference registers on the board  and
	transfers   information  from  the  board to  the  Status  Block.

	  calling sequence:

	     rstsdio(ptr);

	     where:
		  ptr  - (structure  pointer)  This is a pointer  to  the
		  Status Block structure.


	rpntdio.c  -  This module  is used to  perform  the  "Read  Input
	Point" function for the Pmc464  board.	A  pointer to  the  board
	memory  map  structure and  the point number are  passed  to this
        routine.  This information is  used  to read the point value from
        the board.

	  calling sequence:

	     status = rpntdio(ptr,port,point);

	     where:
		  status   - (long) Returned value of the input point.
                  port - (unsigned) The target I/O port number.
		  ptr  - (structure  pointer)  This is a pointer  to  the
				 Configuration Block structure.
		  point    - (unsigned) Target input point number.


	rprtdio.c  -  This  module  is used to perform  the  "Read  Input
	Port" function for the Pmc464  board.   A  pointer  to the  board
	memory map structure is passed to this routine.  This information
        is used to read the input port data value from the  board.

	  calling sequence:

	     status = rprtdio(ptr, port);

	     where:
		  status   - (long) Returned value of the input port.
		  ptr  - (structure  pointer)  This is a pointer  to  the
				 Configuration Block structure.
                  port - (unsigned) The target I/O port number.











				   10








	wpntdio.c  -  This module is used to perform  the  "Write Output
	Point" function for the Pmc464 board.   A pointer to  the  board
	memory  map  structure and  the point  number  and  point  value
        to write are passed to this routine.


	  calling sequence:

	     status = wpntdio(ptr,port,point,value);

	     where:
		  status   - (long) Returned error status of the function.
		  ptr  - (structure  pointer)  This is a pointer  to  the
				 Configuration Block structure.
                  port - (unsigned) The target I/O port number.
		  point    - (unsigned) Target output point number.
		  value    - (unsigned) Value to write to output point.


	wprtdio.c  -  This  module is used to perform  the  "Write Output
	Port" function for the Pmc464  board.   A  pointer to  the  board
	memory map structure and port value to write are  passed  to this
        routine.


	  calling sequence:

	     status = wprtdio(ptr,port,value);

	     where:
		  status   - (long) Returned error status of the function.
		  ptr  - (structure  pointer)  This is a pointer  to  the
				 Configuration Block structure.
                  port - (unsigned) The target I/O port number.
		  value    - (unsigned) Value to write to output port.






















				   11








	isrdio.c - This  file contains a  collection of routines used  to
	perform the Change of State and level interrupt handling.   These
	routines  must  be  attached  before  trying to  use these types
	of interrupts.  See the supplied example program "drvrdio.c"



	  calling sequence:

	     This  module is not called directly.  The included  routines
	     are attached to interrupt vectors and are  used  to  service
	     interrupts.



	8. Description of Support Programs

	Following  is  a  description of the support  files  and  program
	modules  which  provide  examples  for  the  use  of  the library
	programs.

	pmcmulticommon.c - This file provides Pmc common support routines.

	drvrdio.c  - This  is a program which demonstrates the  usage  of
	the library modules.   This program is menu driven and allows the
	user to become familiar with the  Pmc464  board  and  the library
	software.   The user may,  through menu  selections,   configure,
	read from and write to the board.





























				   12

